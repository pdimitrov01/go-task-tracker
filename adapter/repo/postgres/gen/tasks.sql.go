// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getTaskById = `-- name: GetTaskById :one
SELECT id, title, description, status, due_date, created_at
FROM tasks AS t
WHERE t.id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.queryRow(ctx, q.getTaskByIdStmt, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, status, due_date, created_at
FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksStmt, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTask = `-- name: SaveTask :one
INSERT INTO tasks (id,
                   title,
                   description,
                   status,
                   due_date,
                   created_at)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        now())
RETURNING id, title, description, status, due_date, created_at
`

type SaveTaskParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Status      string    `json:"status"`
	DueDate     time.Time `json:"due_date"`
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.saveTaskStmt, saveTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}
